/*global MediumEditor, describe, it, expect, spyOn,
         afterEach, beforeEach, selectElementContents,
         jasmine, fireEvent, console, tearDown*/

describe('Exploits', function () {
    'use strict';

    beforeEach(function () {
        jasmine.clock().install();
        this.el = document.createElement('div');
        this.el.className = 'editor';
        this.el.id = 'paste-editor';
        this.el.innerHTML = 'hhh';
        document.body.appendChild(this.el);
    });

    afterEach(function () {
        tearDown(this.el);
        jasmine.clock().uninstall();
    });

    it('Should not execute javascript with disableReturn false', function () {
        var evt, range,
            editorEl = this.el,
            sel = window.getSelection(),
            editor = new MediumEditor('.editor', {
                delay: 200,
                disableReturn: false
            }),
            test = {
                source: 'img onerror handler',
                paste: '><img src="x" onerror="alert(\'xss\')">',
                output: '<p>&gt;&lt;img src="x" onerror="alert(\'xss\')"&gt;</p>'
            };

        // mock event with clipboardData API
        // test requires creating a function, so can't loop or jslint balks
        evt = {
            preventDefault: function () {
                return;
            },
            clipboardData: {
                getData: function (type) {
                    // do we need to return different results for the different types? text/plain, text/html
                    return test.paste;
                }
            }
        };

        editorEl.innerHTML = '<span id="editor-inner">&nbsp</span>';

        range = document.createRange();
        range.selectNodeContents(editorEl);
        sel.removeAllRanges();
        sel.addRange(range);

        editor.pasteWrapper.apply(editorEl, [evt]);
        jasmine.clock().tick(100);
        expect(editorEl.innerHTML).toEqual(test.output);

    });

    it('Should not execute javascript with disableReturn true', function () {
        var evt, range,
            editorEl = this.el,
            sel = window.getSelection(),
            editor = new MediumEditor('.editor', {
                delay: 200,
                disableReturn: true
            }),
            test = {
                source: 'img onerror handler',
                paste: '><img src="x" onerror="alert(\'xss\')">',
                output: '<span id="editor-inner">&gt;&lt;img src="x" onerror="alert(\'xss\')"&gt;</span>'
            };

        // mock event with clipboardData API
        // test requires creating a function, so can't loop or jslint balks
        evt = {
            preventDefault: function () {
                return;
            },
            clipboardData: {
                getData: function (type) {
                    // do we need to return different results for the different types? text/plain, text/html
                    return test.paste;
                }
            }
        };

        editorEl.innerHTML = '<span id="editor-inner">&nbsp</span>';

        range = document.createRange();
        range.selectNodeContents(document.getElementById('editor-inner'));
        sel.removeAllRanges();
        sel.addRange(range);

        editor.pasteWrapper.apply(editorEl, [evt]);
        jasmine.clock().tick(100);
        expect(editorEl.innerHTML).toEqual(test.output);

    });


});
